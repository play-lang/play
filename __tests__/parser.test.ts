import { Play } from "../src/play";

describe("parser", () => {
	test("should parse", () => {
		const tree = Play.describeAstAsJSON("a + ((b - c) * 2)^-2 / 3 % 4");
		expect(tree).toEqual({
			type: "ProgramNode",
			start: 0,
			end: 28,
			isDead: false,
			isLast: false,
			statements: [
				{
					type: "ExpressionStatementNode",
					start: 0,
					end: 28,
					parent: "ProgramNode",
					isDead: false,
					isLast: true,
					expr: {
						type: "BinaryExpressionNode",
						start: 0,
						end: 28,
						parent: "ExpressionStatementNode",
						isDead: false,
						isLast: true,
						lhs: {
							type: "IdExpressionNode",
							start: 0,
							end: 1,
							parent: "BinaryExpressionNode",
							isDead: false,
							isLast: true,
							name: "a",
							usedAsFunction: false,
						},
						rhs: {
							type: "BinaryExpressionNode",
							start: 6,
							end: 28,
							parent: "BinaryExpressionNode",
							isDead: false,
							isLast: true,
							lhs: {
								type: "BinaryExpressionNode",
								start: 6,
								end: 24,
								parent: "BinaryExpressionNode",
								isDead: false,
								isLast: true,
								lhs: {
									type: "BinaryExpressionNode",
									start: 6,
									end: 20,
									parent: "BinaryExpressionNode",
									isDead: false,
									isLast: true,
									lhs: {
										type: "BinaryExpressionNode",
										start: 6,
										end: 16,
										parent: "BinaryExpressionNode",
										isDead: false,
										isLast: true,
										lhs: {
											type: "BinaryExpressionNode",
											start: 6,
											end: 11,
											parent: "BinaryExpressionNode",
											isDead: false,
											isLast: true,
											lhs: {
												type: "IdExpressionNode",
												start: 6,
												end: 7,
												parent: "BinaryExpressionNode",
												isDead: false,
												isLast: true,
												name: "b",
												usedAsFunction: false,
											},
											rhs: {
												type: "IdExpressionNode",
												start: 10,
												end: 11,
												parent: "BinaryExpressionNode",
												isDead: false,
												isLast: true,
												name: "c",
												usedAsFunction: false,
											},
										},
										rhs: {
											type: "PrimitiveExpressionNode",
											start: 15,
											end: 16,
											parent: "BinaryExpressionNode",
											isDead: false,
											isLast: true,
											literalType: "Number",
											literalValue: "2",
										},
									},
									rhs: {
										type: "PrefixExpressionNode",
										start: 18,
										end: 20,
										parent: "BinaryExpressionNode",
										isDead: false,
										isLast: true,
										rhs: {
											type: "PrimitiveExpressionNode",
											start: 19,
											end: 20,
											parent: "PrefixExpressionNode",
											isDead: false,
											isLast: true,
											literalType: "Number",
											literalValue: "2",
										},
									},
								},
								rhs: {
									type: "PrimitiveExpressionNode",
									start: 23,
									end: 24,
									parent: "BinaryExpressionNode",
									isDead: false,
									isLast: true,
									literalType: "Number",
									literalValue: "3",
								},
							},
							rhs: {
								type: "PrimitiveExpressionNode",
								start: 27,
								end: 28,
								parent: "BinaryExpressionNode",
								isDead: false,
								isLast: true,
								literalType: "Number",
								literalValue: "4",
							},
						},
					},
				},
			],
		});
	});
});
